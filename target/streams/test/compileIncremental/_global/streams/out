[0m[[0m[0mdebug[0m] [0m[0mFound differing options:[0m
[0m[[0m[0mdebug[0m] [0m[0ma: scala=-language:postfixOps,-language:implicitConversions java=[0m
[0m[[0m[0mdebug[0m] [0m[0mb: scala=-language:postfixOps,-language:implicitConversions,-feature java=[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] IncrementalCompile -----------[0m
[0m[[0m[0mdebug[0m] [0m[0mIncrementalCompile.incrementalCompile[0m
[0m[[0m[0mdebug[0m] [0m[0mprevious = Stamps for: 3 products, 3 sources, 5 libraries[0m
[0m[[0m[0mdebug[0m] [0m[0mcurrent source = Set(${BASE}/src/test/scala/CollitionTest.scala, ${BASE}/src/test/scala/Degeneration.scala, ${BASE}/src/test/scala/WordTest.scala, ${BASE}/src/test/scala/ButterflyTest.scala, ${BASE}/src/test/scala/plantTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m> initialChanges = InitialChanges(Changes(added = Set(${BASE}/src/test/scala/plantTest.scala, ${BASE}/src/test/scala/CollitionTest.scala, ${BASE}/src/test/scala/Degeneration.scala, ${BASE}/src/test/scala/ButterflyTest.scala, ${BASE}/src/test/scala/WordTest.scala), removed = Set(${BASE}/src/test/scala/tst1.scala, ${BASE}/src/test/scala/EatingReactionTest.scala, ${BASE}/src/test/scala/behaviorTest.scala), changed = Set(), unmodified = ...),Set(${BASE}/target/scala-2.13/test-classes/EatingReactionTest.class, ${BASE}/target/scala-2.13/test-classes/behaviorTest.class, ${BASE}/target/scala-2.13/test-classes/tst1.class),Set(),API Changes: Set(NamesChange(model.BoundingBox,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(Triangle,[Default]), UsedName(wait,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(BoundingBox,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(Rectangle,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]))), NamesChange(model.CreatureImpl$ButterflyImpl$,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(ButterflyImpl,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(model;CreatureImpl;ButterflyImpl;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.BoundingBox$,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(Triangle,[Default]), UsedName(wait,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(BoundingBox,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(Rectangle,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]))), NamesChange(model.CreatureImpl$ButterflyImpl,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(ButterflyImpl,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(model;CreatureImpl;ButterflyImpl;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.BoundingBox$Circle,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(model;BoundingBox;Circle;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(radius,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.CreatureImpl$,ModifiedNames(changes = UsedName(ButterflyImpl,[Default]), UsedName(DEF_NEXT_DIRECTION,[Default]), UsedName(EggsImpl,[Default]), UsedName(NectarPlant,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(LarvaImpl,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(DEF_BLOB_FOV_RADIUS,[Default]), UsedName(finalize,[Default]), UsedName(CreatureImpl,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(PuppaImpl,[Default]), UsedName(flourPlant,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(DEF_BLOB_LIFE,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(DEF_BLOB_VELOCITY,[Default]), UsedName(clone,[Default]))), NamesChange(model.Point2D,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(WORLD_HEIGHT,[Default]), UsedName(productPrefix,[Default]), UsedName(WORLD_WIDTH,[Default]), UsedName(Point2D,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(randomPosition,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(synchronized,[Default]), UsedName(model;Point2D;init;,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(x,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(y,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(DEF_EQUILATERAL_ANGLE,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.reaction.BeingEatenEffect,ModifiedNames(changes = UsedName(eatingByPredatorEffect,[Default]))), NamesChange(model.creature.creatureStructure$,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(Plant,[Default]), UsedName(Predator,[Default]), UsedName(notify,[Default]), UsedName(ButterflyWithTemporaryStatus,[Default]), UsedName(Living,[Default]), UsedName(Butterfly,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(Moving,[Default]), UsedName(!=,[Default]), UsedName(creatureStructure,[Default]), UsedName(Creature,[Default]), UsedName(Intelligent,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Domain,[Default]), UsedName(ne,[Default]), UsedName(fliying,[Default]), UsedName(eating,[Default]), UsedName(Food,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]))), NamesChange(model.reaction.BeingEatenEffect$,ModifiedNames(changes = UsedName(eatingByPredatorEffect,[Default]))), NamesChange(model.CreatureImpl$LarvaImpl,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(LarvaImpl,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(model;CreatureImpl;LarvaImpl;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.CreatureImpl$EggsImpl$,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(EggsImpl,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(model;CreatureImpl;EggsImpl;init;,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.CreatureImpl$PuppaImpl,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(model;CreatureImpl;PuppaImpl;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(PuppaImpl,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.BoundingBox$Triangle$,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(Triangle,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(model;BoundingBox;Triangle;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(angle,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(height,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.creature.creatureStructure$Domain$,ModifiedNames(changes = UsedName(DegradationEffect,[Default]), UsedName(ToChange,[Default]), UsedName(wait,[Default]), UsedName(Life,[Default]), UsedName(notify,[Default]), UsedName(EatingEffect,[Default]), UsedName(Velocity,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(LifeCycle,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Domain,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]))), NamesChange(model.BoundingBox$Circle$,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(model;BoundingBox;Circle;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(radius,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.CreatureImpl$LarvaImpl$,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(LarvaImpl,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(model;CreatureImpl;LarvaImpl;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.Point2D$,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(WORLD_HEIGHT,[Default]), UsedName(productPrefix,[Default]), UsedName(WORLD_WIDTH,[Default]), UsedName(Point2D,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(randomPosition,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(synchronized,[Default]), UsedName(model;Point2D;init;,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(x,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(y,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(DEF_EQUILATERAL_ANGLE,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.BoundingBox$Triangle,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(Triangle,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(model;BoundingBox;Triangle;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(angle,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(height,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.reaction.EatingEffect$,ModifiedNames(changes = UsedName(DEF_FOOD_ENERGY,[Default]), UsedName(eatingReproducingOrNectarFoodEffect,[Default]), UsedName(REDUCE_LIFE,[Default]), UsedName(iscollidedWithNectarPlant,[Default]), UsedName(MIN_BLOB_FOV_RADIUS,[Default]), UsedName(MIN_BLOB_RADIUS,[Default]), UsedName(DEF_BLOB_RADIUS,[Default]), UsedName(spwanEggs,[Default]), UsedName(collidedWithPredactor,[Default]), UsedName(DEF_NECTARD_ENERGY,[Default]), UsedName(collideWithSimplePlan,[Default]), UsedName(collisionWithPredactor,[Default]), UsedName(simplePlantCollidedwithButterflyEntity,[Default]), UsedName(eatingStandardPLantEffect,[Default]), UsedName(INTERVAL,[Default]), UsedName(collisionREceptivePLan,[Default]))), NamesChange(model.reaction.EatingEffect,ModifiedNames(changes = UsedName(DEF_FOOD_ENERGY,[Default]), UsedName(eatingReproducingOrNectarFoodEffect,[Default]), UsedName(REDUCE_LIFE,[Default]), UsedName(iscollidedWithNectarPlant,[Default]), UsedName(MIN_BLOB_FOV_RADIUS,[Default]), UsedName(MIN_BLOB_RADIUS,[Default]), UsedName(DEF_BLOB_RADIUS,[Default]), UsedName(spwanEggs,[Default]), UsedName(collidedWithPredactor,[Default]), UsedName(DEF_NECTARD_ENERGY,[Default]), UsedName(collideWithSimplePlan,[Default]), UsedName(collisionWithPredactor,[Default]), UsedName(simplePlantCollidedwithButterflyEntity,[Default]), UsedName(eatingStandardPLantEffect,[Default]), UsedName(INTERVAL,[Default]), UsedName(collisionREceptivePLan,[Default]))), NamesChange(model.creature.creatureStructure$Butterfly,ModifiedNames(changes = UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(Butterfly,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]))), NamesChange(model.CreatureImpl$EggsImpl,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(EggsImpl,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(model;CreatureImpl;EggsImpl;init;,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.CreatureImpl$PuppaImpl$,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(model;CreatureImpl;PuppaImpl;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(PuppaImpl,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.creature.creatureStructure$Creature,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(Creature,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default])))))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.BoundingBox has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply,[Default]), UsedName(Triangle,[Default]), UsedName(wait,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(BoundingBox,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(Rectangle,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.BoundingBox: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.BoundingBox.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply,[Default]), UsedName(Triangle,[Default]), UsedName(Circle,[Default]), UsedName(BoundingBox,[Default]), UsedName(equals,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.CreatureImpl$ButterflyImpl$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply$default$3,[Default]), UsedName(ButterflyImpl,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(model;CreatureImpl;ButterflyImpl;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.CreatureImpl$ButterflyImpl$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.CreatureImpl$ButterflyImpl$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply$default$3,[Default]), UsedName(ButterflyImpl,[Default]), UsedName(apply,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$7,[Default]), UsedName(copy$default$5,[Default]), UsedName(copy,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.BoundingBox$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply,[Default]), UsedName(Triangle,[Default]), UsedName(wait,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(BoundingBox,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(Rectangle,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.BoundingBox$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.BoundingBox$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply,[Default]), UsedName(Triangle,[Default]), UsedName(Circle,[Default]), UsedName(BoundingBox,[Default]), UsedName(equals,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.CreatureImpl$ButterflyImpl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply$default$3,[Default]), UsedName(ButterflyImpl,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(model;CreatureImpl;ButterflyImpl;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.CreatureImpl$ButterflyImpl: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.CreatureImpl$ButterflyImpl.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply$default$3,[Default]), UsedName(ButterflyImpl,[Default]), UsedName(apply,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$7,[Default]), UsedName(copy$default$5,[Default]), UsedName(copy,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.BoundingBox$Circle has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(model;BoundingBox;Circle;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(radius,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.BoundingBox$Circle: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.BoundingBox$Circle.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply,[Default]), UsedName(copy$default$2,[Default]), UsedName(Circle,[Default]), UsedName(copy,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.CreatureImpl$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ButterflyImpl,[Default]), UsedName(DEF_NEXT_DIRECTION,[Default]), UsedName(EggsImpl,[Default]), UsedName(NectarPlant,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(LarvaImpl,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(DEF_BLOB_FOV_RADIUS,[Default]), UsedName(finalize,[Default]), UsedName(CreatureImpl,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(PuppaImpl,[Default]), UsedName(flourPlant,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(DEF_BLOB_LIFE,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(DEF_BLOB_VELOCITY,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.CreatureImpl$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.CreatureImpl$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(ButterflyImpl,[Default]), UsedName(EggsImpl,[Default]), UsedName(LarvaImpl,[Default]), UsedName(CreatureImpl,[Default]), UsedName(PuppaImpl,[Default]), UsedName(equals,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.Point2D has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply,[Default]), UsedName(WORLD_HEIGHT,[Default]), UsedName(productPrefix,[Default]), UsedName(WORLD_WIDTH,[Default]), UsedName(Point2D,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(randomPosition,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(synchronized,[Default]), UsedName(model;Point2D;init;,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(x,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(y,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(DEF_EQUILATERAL_ANGLE,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.Point2D: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.Point2D.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply,[Default]), UsedName(Point2D,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.reaction.BeingEatenEffect has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eatingByPredatorEffect,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.reaction.BeingEatenEffect: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.reaction.BeingEatenEffect.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(eatingByPredatorEffect,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.creature.creatureStructure$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(wait,[Default]), UsedName(Plant,[Default]), UsedName(Predator,[Default]), UsedName(notify,[Default]), UsedName(ButterflyWithTemporaryStatus,[Default]), UsedName(Living,[Default]), UsedName(Butterfly,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(Moving,[Default]), UsedName(!=,[Default]), UsedName(creatureStructure,[Default]), UsedName(Creature,[Default]), UsedName(Intelligent,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Domain,[Default]), UsedName(ne,[Default]), UsedName(fliying,[Default]), UsedName(eating,[Default]), UsedName(Food,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.creature.creatureStructure$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.creature.creatureStructure$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(Butterfly,[Default]), UsedName(creatureStructure,[Default]), UsedName(Creature,[Default]), UsedName(Domain,[Default]), UsedName(equals,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.reaction.BeingEatenEffect$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eatingByPredatorEffect,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.reaction.BeingEatenEffect$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.reaction.BeingEatenEffect$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(eatingByPredatorEffect,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.CreatureImpl$LarvaImpl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(LarvaImpl,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(model;CreatureImpl;LarvaImpl;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.CreatureImpl$LarvaImpl: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.CreatureImpl$LarvaImpl.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy$default$3,[Default]), UsedName(LarvaImpl,[Default]), UsedName(copy$default$7,[Default]), UsedName(copy$default$5,[Default]), UsedName(copy,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.CreatureImpl$EggsImpl$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(EggsImpl,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(model;CreatureImpl;EggsImpl;init;,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.CreatureImpl$EggsImpl$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.CreatureImpl$EggsImpl$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(copy$default$4,[Default]), UsedName(EggsImpl,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$7,[Default]), UsedName(copy$default$5,[Default]), UsedName(copy,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.CreatureImpl$PuppaImpl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(model;CreatureImpl;PuppaImpl;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(PuppaImpl,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.CreatureImpl$PuppaImpl: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.CreatureImpl$PuppaImpl.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$7,[Default]), UsedName(copy$default$5,[Default]), UsedName(copy,[Default]), UsedName(PuppaImpl,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.BoundingBox$Triangle$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(Triangle,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(model;BoundingBox;Triangle;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(angle,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(height,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.BoundingBox$Triangle$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.BoundingBox$Triangle$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(Triangle,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.creature.creatureStructure$Domain$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(DegradationEffect,[Default]), UsedName(ToChange,[Default]), UsedName(wait,[Default]), UsedName(Life,[Default]), UsedName(notify,[Default]), UsedName(EatingEffect,[Default]), UsedName(Velocity,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(LifeCycle,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Domain,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.creature.creatureStructure$Domain$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.creature.creatureStructure$Domain$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(DegradationEffect,[Default]), UsedName(Life,[Default]), UsedName(EatingEffect,[Default]), UsedName(Velocity,[Default]), UsedName(Domain,[Default]), UsedName(equals,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.BoundingBox$Circle$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(model;BoundingBox;Circle;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(radius,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.BoundingBox$Circle$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.BoundingBox$Circle$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply,[Default]), UsedName(copy$default$2,[Default]), UsedName(Circle,[Default]), UsedName(copy,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.CreatureImpl$LarvaImpl$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(LarvaImpl,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(model;CreatureImpl;LarvaImpl;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.CreatureImpl$LarvaImpl$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.CreatureImpl$LarvaImpl$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy$default$3,[Default]), UsedName(LarvaImpl,[Default]), UsedName(copy$default$7,[Default]), UsedName(copy$default$5,[Default]), UsedName(copy,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.Point2D$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply,[Default]), UsedName(WORLD_HEIGHT,[Default]), UsedName(productPrefix,[Default]), UsedName(WORLD_WIDTH,[Default]), UsedName(Point2D,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(randomPosition,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(synchronized,[Default]), UsedName(model;Point2D;init;,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(x,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(y,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(DEF_EQUILATERAL_ANGLE,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.Point2D$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.Point2D$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply,[Default]), UsedName(Point2D,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.BoundingBox$Triangle has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(Triangle,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(model;BoundingBox;Triangle;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(angle,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(height,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.BoundingBox$Triangle: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.BoundingBox$Triangle.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(Triangle,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.reaction.EatingEffect$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(DEF_FOOD_ENERGY,[Default]), UsedName(eatingReproducingOrNectarFoodEffect,[Default]), UsedName(REDUCE_LIFE,[Default]), UsedName(iscollidedWithNectarPlant,[Default]), UsedName(MIN_BLOB_FOV_RADIUS,[Default]), UsedName(MIN_BLOB_RADIUS,[Default]), UsedName(DEF_BLOB_RADIUS,[Default]), UsedName(spwanEggs,[Default]), UsedName(collidedWithPredactor,[Default]), UsedName(DEF_NECTARD_ENERGY,[Default]), UsedName(collideWithSimplePlan,[Default]), UsedName(collisionWithPredactor,[Default]), UsedName(simplePlantCollidedwithButterflyEntity,[Default]), UsedName(eatingStandardPLantEffect,[Default]), UsedName(INTERVAL,[Default]), UsedName(collisionREceptivePLan,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.reaction.EatingEffect$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.reaction.EatingEffect$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(DEF_FOOD_ENERGY,[Default]), UsedName(eatingReproducingOrNectarFoodEffect,[Default]), UsedName(REDUCE_LIFE,[Default]), UsedName(collisionWithPredactor,[Default]), UsedName(eatingStandardPLantEffect,[Default]), UsedName(collisionREceptivePLan,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.reaction.EatingEffect has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(DEF_FOOD_ENERGY,[Default]), UsedName(eatingReproducingOrNectarFoodEffect,[Default]), UsedName(REDUCE_LIFE,[Default]), UsedName(iscollidedWithNectarPlant,[Default]), UsedName(MIN_BLOB_FOV_RADIUS,[Default]), UsedName(MIN_BLOB_RADIUS,[Default]), UsedName(DEF_BLOB_RADIUS,[Default]), UsedName(spwanEggs,[Default]), UsedName(collidedWithPredactor,[Default]), UsedName(DEF_NECTARD_ENERGY,[Default]), UsedName(collideWithSimplePlan,[Default]), UsedName(collisionWithPredactor,[Default]), UsedName(simplePlantCollidedwithButterflyEntity,[Default]), UsedName(eatingStandardPLantEffect,[Default]), UsedName(INTERVAL,[Default]), UsedName(collisionREceptivePLan,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.reaction.EatingEffect: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.reaction.EatingEffect.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(DEF_FOOD_ENERGY,[Default]), UsedName(eatingReproducingOrNectarFoodEffect,[Default]), UsedName(REDUCE_LIFE,[Default]), UsedName(collisionWithPredactor,[Default]), UsedName(eatingStandardPLantEffect,[Default]), UsedName(collisionREceptivePLan,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.creature.creatureStructure$Butterfly has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(Butterfly,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.creature.creatureStructure$Butterfly: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.creature.creatureStructure$Butterfly.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(Butterfly,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.CreatureImpl$EggsImpl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(EggsImpl,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(model;CreatureImpl;EggsImpl;init;,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.CreatureImpl$EggsImpl: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.CreatureImpl$EggsImpl.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(copy$default$4,[Default]), UsedName(EggsImpl,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$7,[Default]), UsedName(copy$default$5,[Default]), UsedName(copy,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.CreatureImpl$PuppaImpl$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(model;CreatureImpl;PuppaImpl;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(PuppaImpl,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.CreatureImpl$PuppaImpl$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.CreatureImpl$PuppaImpl$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$7,[Default]), UsedName(copy$default$5,[Default]), UsedName(copy,[Default]), UsedName(PuppaImpl,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe model.creature.creatureStructure$Creature has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(Creature,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) model.creature.creatureStructure$Creature: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) model.creature.creatureStructure$Creature.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of EatingReactionTest: Set(UsedName(Creature,[Default]), UsedName(equals,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	removed: Set(${BASE}/src/test/scala/tst1.scala, ${BASE}/src/test/scala/EatingReactionTest.scala, ${BASE}/src/test/scala/behaviorTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(${BASE}/src/test/scala/CollitionTest.scala, ${BASE}/src/test/scala/Degeneration.scala, ${BASE}/src/test/scala/WordTest.scala, ${BASE}/src/test/scala/ButterflyTest.scala, ${BASE}/src/test/scala/plantTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(${BASE}/target/scala-2.13/test-classes/EatingReactionTest.class, ${BASE}/target/scala-2.13/test-classes/behaviorTest.class, ${BASE}/target/scala-2.13/test-classes/tst1.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(model.BoundingBox,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(Triangle,[Default]), UsedName(wait,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(BoundingBox,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(Rectangle,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]))), NamesChange(model.CreatureImpl$ButterflyImpl$,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(ButterflyImpl,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(model;CreatureImpl;ButterflyImpl;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.BoundingBox$,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(Triangle,[Default]), UsedName(wait,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(BoundingBox,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(Rectangle,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]))), NamesChange(model.CreatureImpl$ButterflyImpl,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(ButterflyImpl,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(model;CreatureImpl;ButterflyImpl;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.BoundingBox$Circle,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(model;BoundingBox;Circle;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(radius,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.CreatureImpl$,ModifiedNames(changes = UsedName(ButterflyImpl,[Default]), UsedName(DEF_NEXT_DIRECTION,[Default]), UsedName(EggsImpl,[Default]), UsedName(NectarPlant,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(LarvaImpl,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(DEF_BLOB_FOV_RADIUS,[Default]), UsedName(finalize,[Default]), UsedName(CreatureImpl,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(PuppaImpl,[Default]), UsedName(flourPlant,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(DEF_BLOB_LIFE,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(DEF_BLOB_VELOCITY,[Default]), UsedName(clone,[Default]))), NamesChange(model.Point2D,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(WORLD_HEIGHT,[Default]), UsedName(productPrefix,[Default]), UsedName(WORLD_WIDTH,[Default]), UsedName(Point2D,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(randomPosition,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(synchronized,[Default]), UsedName(model;Point2D;init;,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(x,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(y,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(DEF_EQUILATERAL_ANGLE,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.reaction.BeingEatenEffect,ModifiedNames(changes = UsedName(eatingByPredatorEffect,[Default]))), NamesChange(model.creature.creatureStructure$,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(Plant,[Default]), UsedName(Predator,[Default]), UsedName(notify,[Default]), UsedName(ButterflyWithTemporaryStatus,[Default]), UsedName(Living,[Default]), UsedName(Butterfly,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(Moving,[Default]), UsedName(!=,[Default]), UsedName(creatureStructure,[Default]), UsedName(Creature,[Default]), UsedName(Intelligent,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Domain,[Default]), UsedName(ne,[Default]), UsedName(fliying,[Default]), UsedName(eating,[Default]), UsedName(Food,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]))), NamesChange(model.reaction.BeingEatenEffect$,ModifiedNames(changes = UsedName(eatingByPredatorEffect,[Default]))), NamesChange(model.CreatureImpl$LarvaImpl,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(LarvaImpl,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(model;CreatureImpl;LarvaImpl;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.CreatureImpl$EggsImpl$,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(EggsImpl,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(model;CreatureImpl;EggsImpl;init;,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.CreatureImpl$PuppaImpl,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(model;CreatureImpl;PuppaImpl;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(PuppaImpl,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.BoundingBox$Triangle$,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(Triangle,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(model;BoundingBox;Triangle;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(angle,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(height,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.creature.creatureStructure$Domain$,ModifiedNames(changes = UsedName(DegradationEffect,[Default]), UsedName(ToChange,[Default]), UsedName(wait,[Default]), UsedName(Life,[Default]), UsedName(notify,[Default]), UsedName(EatingEffect,[Default]), UsedName(Velocity,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(LifeCycle,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Domain,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]))), NamesChange(model.BoundingBox$Circle$,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(Circle,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(model;BoundingBox;Circle;init;,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(radius,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.CreatureImpl$LarvaImpl$,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(LarvaImpl,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(model;CreatureImpl;LarvaImpl;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.Point2D$,ModifiedNames(changes = UsedName(apply,[Default]), UsedName(WORLD_HEIGHT,[Default]), UsedName(productPrefix,[Default]), UsedName(WORLD_WIDTH,[Default]), UsedName(Point2D,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(randomPosition,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(productIterator,[Default]), UsedName(synchronized,[Default]), UsedName(model;Point2D;init;,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(x,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(y,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(DEF_EQUILATERAL_ANGLE,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.BoundingBox$Triangle,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(Triangle,[Default]), UsedName(copy$default$2,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(point,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(model;BoundingBox;Triangle;init;,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(angle,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(height,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(clone,[Default]))), NamesChange(model.reaction.EatingEffect$,ModifiedNames(changes = UsedName(DEF_FOOD_ENERGY,[Default]), UsedName(eatingReproducingOrNectarFoodEffect,[Default]), UsedName(REDUCE_LIFE,[Default]), UsedName(iscollidedWithNectarPlant,[Default]), UsedName(MIN_BLOB_FOV_RADIUS,[Default]), UsedName(MIN_BLOB_RADIUS,[Default]), UsedName(DEF_BLOB_RADIUS,[Default]), UsedName(spwanEggs,[Default]), UsedName(collidedWithPredactor,[Default]), UsedName(DEF_NECTARD_ENERGY,[Default]), UsedName(collideWithSimplePlan,[Default]), UsedName(collisionWithPredactor,[Default]), UsedName(simplePlantCollidedwithButterflyEntity,[Default]), UsedName(eatingStandardPLantEffect,[Default]), UsedName(INTERVAL,[Default]), UsedName(collisionREceptivePLan,[Default]))), NamesChange(model.reaction.EatingEffect,ModifiedNames(changes = UsedName(DEF_FOOD_ENERGY,[Default]), UsedName(eatingReproducingOrNectarFoodEffect,[Default]), UsedName(REDUCE_LIFE,[Default]), UsedName(iscollidedWithNectarPlant,[Default]), UsedName(MIN_BLOB_FOV_RADIUS,[Default]), UsedName(MIN_BLOB_RADIUS,[Default]), UsedName(DEF_BLOB_RADIUS,[Default]), UsedName(spwanEggs,[Default]), UsedName(collidedWithPredactor,[Default]), UsedName(DEF_NECTARD_ENERGY,[Default]), UsedName(collideWithSimplePlan,[Default]), UsedName(collisionWithPredactor,[Default]), UsedName(simplePlantCollidedwithButterflyEntity,[Default]), UsedName(eatingStandardPLantEffect,[Default]), UsedName(INTERVAL,[Default]), UsedName(collisionREceptivePLan,[Default]))), NamesChange(model.creature.creatureStructure$Butterfly,ModifiedNames(changes = UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(Butterfly,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]))), NamesChange(model.CreatureImpl$EggsImpl,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(EggsImpl,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(model;CreatureImpl;EggsImpl;init;,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.CreatureImpl$PuppaImpl$,ModifiedNames(changes = UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName(copy$default$4,[Default]), UsedName(canEqual,[Default]), UsedName(unapply,[Default]), UsedName(<init>$default$6,[Default]), UsedName(curried,[Default]), UsedName(copy$default$2,[Default]), UsedName(fieldOfViewRadius,[Default]), UsedName(wait,[Default]), UsedName(productElementName,[Default]), UsedName(degradationEffect,[Default]), UsedName(notify,[Default]), UsedName(copy$default$3,[Default]), UsedName(copy$default$6,[Default]), UsedName(productIterator,[Default]), UsedName(<init>$default$3,[Default]), UsedName(<init>$default$5,[Default]), UsedName(copy$default$7,[Default]), UsedName(tupled,[Default]), UsedName(model;CreatureImpl;PuppaImpl;init;,[Default]), UsedName(synchronized,[Default]), UsedName(apply$default$4,[Default]), UsedName(eq,[Default]), UsedName(copy$default$5,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(copy,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(direction,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(apply$default$7,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(ne,[Default]), UsedName(PuppaImpl,[Default]), UsedName(apply$default$6,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(life,[Default]), UsedName(equals,[Default]), UsedName(<init>$default$4,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(<init>$default$7,[Default]), UsedName(copy$default$1,[Default]), UsedName(velocity,[Default]), UsedName(clone,[Default]), UsedName(apply$default$5,[Default]))), NamesChange(model.creature.creatureStructure$Creature,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(!=,[Default]), UsedName(boundingBox,[Default]), UsedName(Creature,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(name,[Default]), UsedName(getClass,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(tst1, EatingReactionTest, behaviorTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(${BASE}/src/test/scala/EatingReactionTest.scala, ${BASE}/src/test/scala/behaviorTest.scala, ${BASE}/src/test/scala/tst1.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set(EatingReactionTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(tst1, EatingReactionTest, behaviorTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(${BASE}/src/test/scala/CollitionTest.scala, ${BASE}/src/test/scala/Degeneration.scala, ${BASE}/src/test/scala/EatingReactionTest.scala, ${BASE}/src/test/scala/tst1.scala, ${BASE}/src/test/scala/WordTest.scala, ${BASE}/src/test/scala/ButterflyTest.scala, ${BASE}/src/test/scala/plantTest.scala, ${BASE}/src/test/scala/behaviorTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: tst1, EatingReactionTest, behaviorTest[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all sources: number of invalidated sources > 50.0% of all sources[0m
[0m[[0m[0mdebug[0m] [0m[0mcompilation cycle 1[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 5 Scala sources to C:\Users\camerum\Documents\pro\target\scala-2.13\test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.13:1.4.3:compile for Scala 2.13.7[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 35fa56b3 for Scala compiler version 2.13.7[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-language:postfixOps[0m
[0m[[0m[0mdebug[0m] [0m[0m	-language:implicitConversions[0m
[0m[[0m[0mdebug[0m] [0m[0m	-feature[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Program Files\BellSoft\LibericaJDK-8\jre\lib\resources.jar;C:\Program Files\BellSoft\LibericaJDK-8\jre\lib\rt.jar;C:\Program Files\BellSoft\LibericaJDK-8\jre\lib\sunrsasign.jar;C:\Program Files\BellSoft\LibericaJDK-8\jre\lib\jsse.jar;C:\Program Files\BellSoft\LibericaJDK-8\jre\lib\jce.jar;C:\Program Files\BellSoft\LibericaJDK-8\jre\lib\charsets.jar;C:\Program Files\BellSoft\LibericaJDK-8\jre\lib\jfr.jar;C:\Program Files\BellSoft\LibericaJDK-8\jre\classes;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.13.7\scala-library-2.13.7.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Users\camerum\Documents\pro\target\scala-2.13\test-classes;C:\Users\camerum\Documents\pro\target\scala-2.13\classes;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-effect_2.13\2.2.0\cats-effect_2.13-2.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalanlp\breeze-viz_2.13\1.1\breeze-viz_2.13-1.1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-parallel-collections_2.13\0.2.0\scala-parallel-collections_2.13-0.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest_2.13\3.2.0\scalatest_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalacheck\scalacheck_2.13\1.14.1\scalacheck_2.13-1.14.1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\it\unibo\alice\tuprolog\tuprolog\3.3.0\tuprolog-3.3.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-core_2.13\2.2.0\cats-core_2.13-2.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalanlp\breeze_2.13\1.1\breeze_2.13-1.1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\jfree\jfreechart\1.5.0\jfreechart-1.5.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\apache\xmlgraphics\xmlgraphics-commons\1.3.1\xmlgraphics-commons-1.3.1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\lowagie\itext\2.1.5\itext-2.1.5.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-reflect\2.13.7\scala-reflect-2.13.7.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-core_2.13\3.2.0\scalatest-core_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-featurespec_2.13\3.2.0\scalatest-featurespec_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-flatspec_2.13\3.2.0\scalatest-flatspec_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-freespec_2.13\3.2.0\scalatest-freespec_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-funsuite_2.13\3.2.0\scalatest-funsuite_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-funspec_2.13\3.2.0\scalatest-funspec_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-propspec_2.13\3.2.0\scalatest-propspec_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-refspec_2.13\3.2.0\scalatest-refspec_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-wordspec_2.13\3.2.0\scalatest-wordspec_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-diagrams_2.13\3.2.0\scalatest-diagrams_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-matchers-core_2.13\3.2.0\scalatest-matchers-core_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-shouldmatchers_2.13\3.2.0\scalatest-shouldmatchers_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-mustmatchers_2.13\3.2.0\scalatest-mustmatchers_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-sbt\test-interface\1.0\test-interface-1.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\apache\commons\commons-lang3\3.0\commons-lang3-3.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\google\code\gson\gson\2.6.2\gson-2.6.2.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-kernel_2.13\2.2.0\cats-kernel_2.13-2.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalanlp\breeze-macros_2.13\1.1\breeze-macros_2.13-1.1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\github\fommil\netlib\core\1.1.2\core-1.1.2.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\net\sourceforge\f2j\arpack_combined_all\0.1\arpack_combined_all-0.1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\net\sf\opencsv\opencsv\2.3\opencsv-2.3.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\github\wendykierp\JTransforms\3.1\JTransforms-3.1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\apache\commons\commons-math3\3.5\commons-math3-3.5.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\chuusai\shapeless_2.13\2.3.3\shapeless_2.13-2.3.3.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\spire_2.13\0.17.0-M1\spire_2.13-0.17.0-M1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-collection-compat_2.13\2.1.1\scala-collection-compat_2.13-2.1.1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\commons-io\commons-io\1.3.1\commons-io-1.3.1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\commons-logging\commons-logging\1.0.4\commons-logging-1.0.4.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\bouncycastle\bcmail-jdk14\138\bcmail-jdk14-138.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\bouncycastle\bcprov-jdk14\138\bcprov-jdk14-138.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest-compatible\3.2.0\scalatest-compatible-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalactic\scalactic_2.13\3.2.0\scalactic_2.13-3.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-xml_2.13\1.2.0\scala-xml_2.13-1.2.0.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\pl\edu\icm\JLargeArrays\1.5\JLargeArrays-1.5.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\spire-macros_2.13\0.17.0-M1\spire-macros_2.13-0.17.0-M1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\spire-platform_2.13\0.17.0-M1\spire-platform_2.13-0.17.0-M1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\spire-util_2.13\0.17.0-M1\spire-util_2.13-0.17.0-M1.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\machinist_2.13\0.6.8\machinist_2.13-0.6.8.jar;C:\Users\camerum\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\algebra_2.13\2.0.0-M2\algebra_2.13-2.0.0-M2.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 3.8316909 s[0m
[0m[[0m[0mdebug[0m] [0m[0mdone compiling[0m
